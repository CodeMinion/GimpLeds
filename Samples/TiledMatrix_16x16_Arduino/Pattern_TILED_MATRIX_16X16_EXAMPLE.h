#ifndef TILED_MATRIX_16X16_EXAMPLE_H
#define TILED_MATRIX_16X16_EXAMPLE_H
#include <avr/pgmspace.h>
#include <Adafruit_NeoPixel.h>
#include "GimpLedPattern.h"

#define TILED_MATRIX_16X16_EXAMPLE_DELAY 400

#define TILED_MATRIX_16X16_EXAMPLE_TOTAL_LEDS 256

namespace NS_TILED_MATRIX_16X16_EXAMPLE {

	const uint32_t TLF_COLOR_SWAP[] PROGMEM = { 
	0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 
	0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 
	0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 
	0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 
	0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 
	0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 
	0xa400c4, 0xa400c4, 0xa400c4, 0xa400c4, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 
	0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 
	0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 
	0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 
	0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 
	0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 
	0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0x00ff29, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
	0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000
	};

	const uint32_t BACKGROUND[] PROGMEM = { 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
	};

	const uint32_t *const TILED_MATRIX_16X16_EXAMPLE[] PROGMEM = { 
	TLF_COLOR_SWAP,
	BACKGROUND,
	};

	const uint32_t TILED_MATRIX_16X16_EXAMPLE_SIZES[] PROGMEM = { 
	256,
	256,
	};

}

using namespace NS_TILED_MATRIX_16X16_EXAMPLE;

		
class Pattern_TILED_MATRIX_16X16_EXAMPLE : public GimpLedPattern 
{

  public:
    Pattern_TILED_MATRIX_16X16_EXAMPLE(Adafruit_NeoPixel& strip): GimpLedPattern(strip){}

    ~Pattern_TILED_MATRIX_16X16_EXAMPLE(){}

    void playPattern() 
    {
      int totalFrames = sizeof(TILED_MATRIX_16X16_EXAMPLE) / sizeof(uint32_t*);
      for (int framePos = 0; framePos < totalFrames; framePos ++)
      {
        int frameTotalLeds = pgm_read_dword(&(TILED_MATRIX_16X16_EXAMPLE_SIZES[framePos]));
		int ledOffset = 0;
        for (int ledPos = 0; ledPos < frameTotalLeds; ledPos++)
        {
          if(mInterrupt)
          {
            // If we are interrupted stop the pattern. "Clean" LED pattern.
            mStrip.clear();
            mStrip.show();
            mInterrupt = false;
            return;
          }
          uint32_t ledColor = pgm_read_dword(&(TILED_MATRIX_16X16_EXAMPLE[framePos][ledPos]));
          int blue = ledColor & 0x00FF;
          int green = (ledColor >> 8) & 0x00FF;
          int red = (ledColor >>  16) & 0x00FF;
          mStrip.setPixelColor(ledPos + ledOffset, red, green, blue);

        }
        mStrip.show();
        delay(TILED_MATRIX_16X16_EXAMPLE_DELAY);
      }
    }

    
    void stopPattern() 
    {
      mInterrupt = true;
    }
};
		
#endif //TILED_MATRIX_16X16_EXAMPLE_H

